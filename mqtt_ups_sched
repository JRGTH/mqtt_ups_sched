#!/bin/sh
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright (c) 2023 - 2025 Jose Rivera (JoseMR).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# mqtt_ups_sched
# Simple UPS command scheduler script (mqtt_ups_sched) for FreeBSD.
# Triggers a timed command if the Inverter/UPS report battery mode operation.
# Requires a running MQTT broker to query data from device in real-time.
# Debug script.
#set -x

# Set environment.
PATH=${PATH}:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
SCRIPTNAME="mqtt_ups_sched"
VERSION="1.9.11"

cmd_version() {
	echo "${SCRIPTNAME} ${VERSION}"
	exit 0
}

cmd_usage() {
	echo -e "Usage: ${SCRIPTNAME} [option] | [topic]
Options:
      start       Start ${SCRIPTNAME} script.
      stop        Stop ${SCRIPTNAME} sctipt.
      stat        Display raw device states.
      jstat       Display device states in JSON format.
      log         Display event logs.
      version     Display ${SCRIPTNAME} version.
      help        Display this help message."
	exit 1
}

# Global variables.
CONFIG_PATH="/usr/local/etc"
CONFIG_FILE="${CONFIG_PATH}/${SCRIPTNAME}.conf"
LOG_FILE="/var/log/${SCRIPTNAME}.log"
LOCK_FILE="/var/run/${SCRIPTNAME}.lock"
SPEAKER_DEV="/dev/speaker"
SPEAKER_MOD="/boot/kernel/speaker.ko"
TIMEOUT_CMD="timeout"
TIMEOUT_COUNT="5"
SUB_CMD="mosquitto_sub"
BC_CMD="bc"
SYSRC_CMD="sysrc"
DEFAULT_NAME="UPS"
DEFAULT_IP="localhost"
DEFAULT_PORT="1883"
DEFAULT_TOPIC_GRIDMODE="Grid"
DEFAULT_TOPIC_BATTMODE="Solar/Battery"
DEFAULT_TOPIC_LOWBATTMODE="Battery/Low"
DEFAULT_CMD="/sbin/shutdown -p now"
DEFAULT_DELAY="30"
DEFAULT_BEEP="NO"
DEFAULT_RETRY="15"
DEFAULT_LOWBATT_FASTSHUTDOWN="NO"
BEEP_TONE="G20"
POLL_INTERVAL="5"
STAT_INTERVAL="4"
BATT_STATUS=""
DEV_STATUS=""
JSON_FORMAT="0"
CHECK_BATTAGE="0"
USER_TOPIC="${2}"

if [ "$#" -lt "1" ] || [ "$#" -gt "2" ]; then
	cmd_usage
fi

check_ifrunning() {
	# Prevent for multiple script instances.
	if [ -f "${LOCK_FILE}" ] || pgrep -qf "${SCRIPTNAME}"; then
		echo "${SCRIPTNAME} already running."
		exit 1
	else
		echo "Starting ${SCRIPTNAME}..."
	fi
}

runtime_config() {
	# Generate initial configuration file.
	if [ ! -f "${CONFIG_FILE}" ]; then
		cat << EOF > ${CONFIG_FILE}
# Run-time configuration file for ${SCRIPTNAME}.
# Auto-generated file from ${SCRIPTNAME}.

# Set the MQTT broker server local IP address.
BROKER_IP="${DEFAULT_IP}"

# Set the broker port, default is 1883 and must be allowed by firewall.
BROKER_PORT="${DEFAULT_PORT}"

# Set to "YES" if the broker is running locally with bridged config, this will override 'BROKER_IP' and 'BROKER_PORT', empty to disable.
BROKER_BRIDGE=""

# Set the broker topic of the battery state of charge, eg: "solar_assistant/total/battery_state_of_charge/state".
# Note that this topic can be set to either the battery state of charge(soc) or the battery voltage state.
BROKER_TOPIC_BATTSOC=""

# Set the broker topic of the device mode state, eg: "solar_assistant/inverter_1/device_mode/state".
BROKER_TOPIC_DEVSTATE=""

# Set the broker state output only when operating in grid mode, eg: "Grid"
BROKER_TOPIC_GRIDMODE="${DEFAULT_TOPIC_GRIDMODE}"

# Set the broker state output only when operating in battery mode, eg: "Solar/Battery".
BROKER_TOPIC_BATTMODE="${DEFAULT_TOPIC_BATTMODE}"

# Select the desired topic/states to be displayed separated by space, eg: "sys/inv/grid/state sys/inv/batt/state sys/inv/etc/state".
# Optionally you can display all device states with the parameter: "# -R -C XX", where "XX" is the max topic/state items of the device.
BROKER_TOPIC_STATS=""

# Provide a device name here for logging and reference.
DEVICE_NAME="${DEFAULT_NAME}"

# Set the minimum battery state of charge(soc) or voltage to be considered as "system battery low" mode, please use an integer or float value here.
DEVICE_BATT_LOW=""

# Set the battery installation date in "YYYYMMDD" for logging and reference.
DEVICE_BATT_INSTALL=""

# Set the battery max age "count" in years before replacement for logging and reference, please use an integer value here.
DEVICE_BATT_MAXAGE=""

# Set the desired command to be executed when shutdown delay time is reached, eg: "shutdown -p now".
SYS_SHUTDOWN_CMD="${DEFAULT_CMD}"

# Set the desired shutdown delay time in seconds, please use an integer value here, set to 0 to disable.
# Time here may be relative due to the time it takes to query the topics and may vary per system.
SYS_SHUTDOWN_DELAY="${DEFAULT_DELAY}"

# Set "YES" here if the system must shutdown immediately if system battery low mode/threshold is reached.
# Note that this will be executed regardless of the "SYS_SHUTDOWN_DELAY" parameter configuration if enabled.
SYS_LOWBATT_FASTSHUTDOWN="${DEFAULT_LOWBATT_FASTSHUTDOWN}"

# Set "YES" here to enable system beeps during some state events, system must feature an internal buzzer/speaker.
SYS_BEEP_ENABLE="${DEFAULT_BEEP}"

# Set the system max retry count in seconds during commlost/errors before the script halts, please use an integer value here.
SYS_RETRY_COUNT="${DEFAULT_RETRY}"

EOF

	echo "Please check '${CONFIG_FILE}' config file to manually configure additional parameters."
	exit 0
	fi

	# Initialize run-time variables.
	if [ -f "${CONFIG_FILE}" ]; then
		BROKER_IP="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_IP)"
		BROKER_PORT="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_PORT)"
		BROKER_BRIDGE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_BRIDGE)"
		BROKER_TOPIC_BATTSOC="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_TOPIC_BATTSOC)"
		BROKER_TOPIC_DEVSTATE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_TOPIC_DEVSTATE)"
		BROKER_TOPIC_GRIDMODE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_TOPIC_GRIDMODE)"
		BROKER_TOPIC_BATTMODE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_TOPIC_BATTMODE)"
		BROKER_TOPIC_STATS="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_TOPIC_STATS)"
		DEVICE_NAME="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn DEVICE_NAME)"
		DEVICE_BATT_LOW="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn DEVICE_BATT_LOW)"
		DEVICE_BATT_INSTALL="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn DEVICE_BATT_INSTALL)"
		DEVICE_BATT_MAXAGE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn DEVICE_BATT_MAXAGE)"
		SYS_SHUTDOWN_CMD="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_SHUTDOWN_CMD)"
		SYS_SHUTDOWN_DELAY="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_SHUTDOWN_DELAY)"
		SYS_LOWBATT_FASTSHUTDOWN="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_LOWBATT_FASTSHUTDOWN)"
		SYS_BEEP_ENABLE="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_BEEP_ENABLE)"
		SYS_RETRY_COUNT="$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_RETRY_COUNT)"
	else
		echo "Error: Config file not found, exiting."
		exit 1
	fi
}

check_config() {
	# Ensure mosquitto_sub command is present.
	if ! which "${SUB_CMD}" >/dev/null; then
		echo "Required '${SUB_CMD}' command not found, exiting!"
		exit 1
	fi

	# Ensure 'bc' command is present.
	if ! which "${BC_CMD}" >/dev/null; then
		echo "Required '${BC_CMD}' command not found, exiting!"
		exit 1
	fi

	# Ensure 'bc' command is present.
	if ! which "${SYSRC_CMD}" >/dev/null; then
		echo "Required '${SYSRC_CMD}' command not found, exiting!"
		exit 1
	fi

	if [ -z "${DEVICE_NAME}" ]; then
		echo "=> Setting default device name."
		${SYSRC_CMD} -f ${CONFIG_FILE} DEVICE_NAME="${DEFAULT_NAME}"
		DEVICE_NAME=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn DEVICE_NAME)
	fi

	if [ -z "${BROKER_IP}" ]; then
		echo "=> Setting default broker ip:"
		${SYSRC_CMD} -f ${CONFIG_FILE} BROKER_IP="${DEFAULT_PORT}"
		BROKER_IP=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_IP)
	fi

	if [ -z "${BROKER_PORT}" ]; then
		echo "=> Setting default broker port:"
		${SYSRC_CMD} -f ${CONFIG_FILE} BROKER_PORT="${DEFAULT_PORT}"
		BROKER_PORT=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn BROKER_PORT)
	fi

	if [ -z "${SYS_SHUTDOWN_CMD}" ]; then
		echo "=> Setting default shutdown command:"
		${SYSRC_CMD} -f ${CONFIG_FILE} SYS_SHUTDOWN_CMD="${DEFAULT_CMD}"
		SYS_SHUTDOWN_CMD=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_SHUTDOWN_CMD)
	fi

	if [ -z "${SYS_SHUTDOWN_DELAY}" ]; then
		echo "=> Setting default shutdown delay:"
		${SYSRC_CMD} -f ${CONFIG_FILE} SYS_SHUTDOWN_DELAY="${DEFAULT_DELAY}"
		SYS_SHUTDOWN_DELAY=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_SHUTDOWN_DELAY)
	fi

	if [ -z "${SYS_BEEP_ENABLE}" ]; then
		echo "=> Setting default system beep:"
		${SYSRC_CMD} -f ${CONFIG_FILE} SYS_BEEP_ENABLE="${DEFAULT_BEEP}"
		SYS_BEEP_ENABLE=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_BEEP_ENABLE)
	fi

	if [ -z "${SYS_RETRY_COUNT}" ]; then
		echo "=> Setting default retry count:"
		${SYSRC_CMD} -f ${CONFIG_FILE} SYS_RETRY_COUNT="${DEFAULT_RETRY}"
		SYS_RETRY_COUNT=$(${SYSRC_CMD} -f ${CONFIG_FILE} -qn SYS_RETRY_COUNT)
	fi

	# If below parameters are not configured then inform and exit.
	if [ -z "${BROKER_TOPIC_BATTSOC}" ]; then
		echo "=> Broker battery state of charge topic parameter not configured."
		exit 1
	fi

	if [ -z "${BROKER_TOPIC_DEVSTATE}" ]; then
		echo "=> Broker device state topic parameter not configured."
		exit 1
	fi

	if [ -z "${BROKER_TOPIC_GRIDMODE}" ]; then
		echo "=> Broker grid mode topic parameter not configured."
		exit 1
	fi

	if [ -z "${BROKER_TOPIC_BATTMODE}" ]; then
		echo "=> Broker battery mode topic parameter not configured."
		exit 1
	fi

	if [ -z "${DEVICE_BATT_LOW}" ]; then
		echo "=> Device low battery parameter not configured."
		exit 1
	fi

	if [ -z "${SYS_LOWBATT_FASTSHUTDOWN}" ]; then
		echo "=> Device low battery fast shutdown parameter not configured."
		exit 1
	fi
}

current_date() {
	# Get current date.
	DATE="$(date +"%F %T")"
}

write_log_file() {
	# Write to log file.
	if [ ! -f "${LOG_FILE}" ]; then
		touch "${LOG_FILE}"
	fi

	if [ -f "${LOG_FILE}" ]; then
		echo "${DATE}: ${DEVICE_NAME} ${MSG}" >> ${LOG_FILE}
		logger -t ${SCRIPTNAME} ${MSG}
	fi
}

ping_check() {
	RETRY="0"
	while :; do
		# Wait for communication before halt.
		if [ "${RETRY}" -ge "${SYS_RETRY_COUNT}" ]; then
			current_date
			speaker_beep
			MSG="Unable to ping the specified broker IP address: '${BROKER_IP}', exiting."
			echo "${MSG}"
			write_log_file
			exit 1
		else
			if ping -c1 -t1 "${BROKER_IP}" >/dev/null; then
				break
			fi
		fi
		# Retry count bump.
		RETRY="$(expr ${RETRY} + 1)"
		sleep 1
	done
}

check_batt_age() {
	# Get a quick battery age approximation just for logging and reference purposes only.
	# This assumes the user properly configured the required parameters as there is no validation check.
	BATTERY_YEAR="$(echo "${DEVICE_BATT_INSTALL}" | cut -c 1-4)"
	CURRENT_YEAR="$(date +%Y)"
	BATTERY_AGED="$(expr ${CURRENT_YEAR} - ${BATTERY_YEAR})"
	if [ "${BATTERY_AGED}" -ge "${DEVICE_BATT_MAXAGE}" ]; then
		current_date
		speaker_beep
		MSG="Currently installed battery may reached its max age!, Battery was installed on: ${DEVICE_BATT_INSTALL}"
		write_log_file
		CHECK_BATTAGE="1"
	fi
}

speaker_beep() {
	# Play beeps on device events.
	if [ "${SYS_BEEP_ENABLE}" = "YES" ] || [ "${SYS_BEEP_ENABLE}" = "yes" ]; then
		if [ -c "${SPEAKER_DEV}" ]; then
			echo ${BEEP_TONE} > ${SPEAKER_DEV}
		else
			# Try to load the speaker kernel module if available, otherwise ignore.
			if ! kldstat -qn "speaker.ko"; then
				if [ -f "${SPEAKER_MOD}" ]; then 
					kldload "${SPEAKER_MOD}" >/dev/null 2>&1 && echo ${BEEP_TONE} > ${SPEAKER_DEV}
				fi
			fi
		fi
	fi
}

cmd_devstats() {
	current_date
	runtime_config

	# Display device extra info/topics/stats.
	if [ -n "${USER_TOPIC}" ] || [ -n "${BROKER_TOPIC_STATS}" ]; then
		if [ "${JSON_FORMAT}" -eq "0" ]; then
			echo "[${DEVICE_NAME}] Status:"
		fi
		# Display a manually entered topic/stat once.
		if [ -n "${USER_TOPIC}" ]; then
			if [ "${JSON_FORMAT}" -eq "1" ]; then
				if [ "${BROKER_BRIDGE}" = "YES" ]; then
					${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v -t ${USER_TOPIC} -C 1 -F %j
				else
					${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v -t ${USER_TOPIC} -C 1 -F %j
				fi
			else
				if [ "${BROKER_BRIDGE}" = "YES" ]; then
					${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v -t ${USER_TOPIC} -C 1
				else
					${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v -t ${USER_TOPIC} -C 1
				fi
			fi
		else
			if ! echo "${BROKER_TOPIC_STATS}" | grep -q "#"; then
				# Display user specified topic/stats from config.
				STAT_SELECT=""
				NUM_COUNT="0"
				for COUNT in ${BROKER_TOPIC_STATS}; do
					NUM_COUNT="$(expr 1 + ${NUM_COUNT})"
				done
				for TOPIC in ${BROKER_TOPIC_STATS}; do
					STAT_SELECT="$(echo " -t ${TOPIC}"${STAT_SELECT})"
				done
				if [ -n "${STAT_SELECT}" ]; then
					if [ "${JSON_FORMAT}" -eq "1" ]; then
						if [ "${BROKER_BRIDGE}" = "YES" ]; then
							${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v ${STAT_SELECT} -C ${NUM_COUNT} -F %j
						else
							${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v ${STAT_SELECT} -C ${NUM_COUNT} -F %j
						fi
					else
						if [ "${BROKER_BRIDGE}" = "YES" ]; then
							${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v ${STAT_SELECT} -C ${NUM_COUNT}
						else
							${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v ${STAT_SELECT} -C ${NUM_COUNT}
						fi
					fi
				fi
			else
				# Display all stats once if wildcard/args "# -R -C XX" specified.
				STAT_ALL="${BROKER_TOPIC_STATS}"
				if [ "${JSON_FORMAT}" -eq "1" ]; then
					if [ "${BROKER_BRIDGE}" = "YES" ]; then
						${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v -t ${STAT_ALL} -F %j
					else
						${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v -t ${STAT_ALL} -F %j
					fi
				else
					if [ "${BROKER_BRIDGE}" = "YES" ]; then
						${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -v -t ${STAT_ALL}
					else
						${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -h ${BROKER_IP} -p ${BROKER_PORT} -v -t ${STAT_ALL}
					fi
				fi
			fi
		fi
	fi
}

get_dev_state() {
	# Get device status.
	if [ "${BROKER_BRIDGE}" = "YES" ]; then
		DEV_STATUS="$(${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -C 1 -t ${BROKER_TOPIC_DEVSTATE} 2>/dev/null)"
	else
		DEV_STATUS="$(${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -C 1 -h ${BROKER_IP} -p ${BROKER_PORT} -t ${BROKER_TOPIC_DEVSTATE} 2>/dev/null)"
	fi
	DEV_STATUS_RETURN="$?"
}

get_batt_state() {
	# Get battery status.
	if [ "${BROKER_BRIDGE}" = "YES" ]; then
		BATT_STATUS="$(${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -C 1 -t ${BROKER_TOPIC_BATTSOC} 2>/dev/null)"
	else
		BATT_STATUS="$(${TIMEOUT_CMD} ${TIMEOUT_COUNT} ${SUB_CMD} -C 1 -h ${BROKER_IP} -p ${BROKER_PORT} -t ${BROKER_TOPIC_BATTSOC} 2>/dev/null)"
	fi
	BATT_STATUS_RETURN="$?"

	# Workaround to deal with the "zero" voltage reading from the broker/device.
	if [ "${BATT_STATUS}" = "0" ] || [ "${BATT_STATUS}" = "0.0" ]; then
		current_date
		MSG="Wrong battery SOC/VOLTS reading from the broker: [${BATT_STATUS}], retrying..."
		write_log_file
		get_batt_state
	fi
}

cmd_logview() {
	# Display device logs.
	if [ -f "${LOG_FILE}" ]; then
		echo "Log file: ${LOG_FILE}"
		cat "${LOG_FILE}"
	elif [ "/var/log/${SCRIPTNAME}/${SCRIPTNAME}.log" ]; then
		echo "Log file: /var/log/${SCRIPTNAME}/${SCRIPTNAME}.log"
		cat "/var/log/${SCRIPTNAME}/${SCRIPTNAME}.log"
	else
		echo "Log file not found, exiting!"
		exit 1
	fi
	exit 0
}

device_status() {
	# Get device status.
	STATUS_DEVSTALE=""
	
	# Standard UPS/Inverter status, use command timeout to avoid execution hang if poor communication.
	get_dev_state
	if [ -n "${DEV_STATUS}" ]; then
		# Check if running on utility grid.
		if [ "${DEV_STATUS}" = "${BROKER_TOPIC_GRIDMODE}" ]; then
			DEV_STATUS="${BROKER_TOPIC_GRIDMODE}"
		# Check if running on battery.
		elif [ "${DEV_STATUS}" = "${BROKER_TOPIC_BATTMODE}" ]; then
			get_batt_state
			# Check if running on low battery.
			if [ -n "${BATT_STATUS}" ]; then
				if [ "$(echo "${BATT_STATUS} <= ${DEVICE_BATT_LOW}" | ${BC_CMD})" -eq "1" ]; then
					DEV_STATUS="${DEFAULT_TOPIC_LOWBATTMODE}"
				fi
			else
				# Make sure to set STATUS_DEVSTALE only if command times out.
				if [ "${BATT_STATUS_RETURN}" -ne "0" ]; then
					STATUS_DEVSTALE="1"
				else
					MSG="Warning: Unable to read battery SOC/VOLTS status."
					write_log_file
				fi
			fi
		fi
	else
		# Make sure to set STATUS_DEVSTALE only if command times out.
		if [ "${DEV_STATUS_RETURN}" -ne "0" ]; then
			STATUS_DEVSTALE="1"
		fi
	fi

	# Get approximate battery age status and logging.
	if [ -n "${DEVICE_BATT_INSTALL}" ] && [ -n "${DEVICE_BATT_MAXAGE}" ]; then
		if [ "${CHECK_BATTAGE}" -eq "0" ]; then
			check_batt_age
		fi
	fi
}

device_commlost() {
	current_date
	speaker_beep
	MSG="Device communication lost, waiting for connection!"
	write_log_file

	RETRY="0"
	while :; do
		# Wait for communication before halting.
		if [ "${RETRY}" -ge "${SYS_RETRY_COUNT}" ]; then
			current_date
			speaker_beep
			MSG="Unable to read device status, retries exhausted exiting!"
			echo "${MSG}"
			write_log_file
			if [ -f "${LOCK_FILE}" ]; then
				rm ${LOCK_FILE}
			fi
			exit 1
		else
			# Rescan device status.
			device_status

			if [ -n "${DEV_STATUS}" ]; then
				# Notify device communication is back.
				current_date
				speaker_beep
				MSG="Device communication restored!"
				write_log_file
				break
			fi
		fi

		# Account for SYS_RETRY_COUNT if the device status stale.
		if [ -n "${STATUS_DEVSTALE}" ]; then
			RETRY="$(expr ${RETRY} + 1 + ${TIMEOUT_COUNT})"
		else
			RETRY="$(expr ${RETRY} + 1)"
		fi
		sleep 1
	done
}

system_shutdown_cmd() {
	current_date
	speaker_beep
	MSG="System going to shutdown now!"
	write_log_file

	echo "${SYS_SHUTDOWN_CMD}" | sh
	CMD_RETURN="$?"
	if [ "${CMD_RETURN}" -eq "0" ]; then
		exit 0
	else
		MSG="Shutdown command execution returned: '${CMD_RETURN}'"
		write_log_file
		exit ${CMD_RETURN}
	fi
}

system_shutdown_lowbatt() {
	current_date
	MSG="System running on low battery power!"
	write_log_file
	if [ "${SYS_LOWBATT_FASTSHUTDOWN}" = "YES" ] || [ "${SYS_LOWBATT_FASTSHUTDOWN}" = "yes" ]; then
		# Shutdown system immediately if running on low battery.
		system_shutdown_cmd
	else
		# Initialize the system shutdown countdown.
		system_shutdown_timer
	fi
}

system_shutdown_timer() {
	speaker_beep
	QUERY="0"
	RETRY="0"
	while :; do
		# If the config parameter "SYS_SHUTDOWN_DELAY" is set to "0" the shutdown delay timer will be ignored.
		if [ "${RETRY}" -ge "${SYS_SHUTDOWN_DELAY}" ] && [ "${SYS_SHUTDOWN_DELAY}" -ne "0" ]; then
			# Shutdown system if still running on battery power.
			system_shutdown_cmd
		else
			# Rescan device status before shutdown.
			# Be aware that the final shutdown time here may be relative, this is due to the execution time it takes to ping/query the topics in regards(Device mode, Battery state etc).
			# Hence the time will be relatively compensated to get the closest approximation, this may be improved in further releases however refer to the hard coded "STAT_INTERVAL"
			# global variable for custom changes in the meantime, the appended "seconds" should be greater than zero and must be an integer value.
			QUERY="1"
			device_status

			if [ "${DEV_STATUS}" = "${BROKER_TOPIC_GRIDMODE}" ]; then
				current_date
				speaker_beep
				MSG="System running on utility power!"
				write_log_file
				break
			elif [ "${DEV_STATUS}" = "${DEFAULT_TOPIC_LOWBATTMODE}" ]; then
				system_shutdown_lowbatt
			elif [ -z "${DEV_STATUS}" ]; then
				# Notify communication with the device is lost.
				device_commlost
			fi
		fi

		# Workaround to append relative time compensation.
		# This may be improved in further releases.
		if [ "${QUERY}" = "1" ]; then
			QUERY_TIME="${STAT_INTERVAL}"
		else
			QUERY_TIME="1"
		fi
		RETRY="$(expr ${RETRY} + ${QUERY_TIME})"
		sleep 1
	done
}

cmd_stop() {
	current_date
	if [ -f "${LOCK_FILE}" ] || pgrep -qf "${SCRIPTNAME}"; then
		echo "Stopping ${SCRIPTNAME}..."
		rm ${LOCK_FILE}
		pkill -f ${SCRIPTNAME}
		exit 0
	else
		echo "${SCRIPTNAME} not running!"
		exit 1
	fi
}

cmd_start() {
	current_date
	check_ifrunning
	runtime_config
	check_config
	ping_check
	speaker_beep

	while :; do
		# Scan device status loop.
		device_status

		if [ "${DEV_STATUS}" = "${BROKER_TOPIC_GRIDMODE}" ]; then
			sleep ${POLL_INTERVAL}
		elif [ "${DEV_STATUS}" = "${BROKER_TOPIC_BATTMODE}" ]; then
			# Initialize the system shutdown countdown.
			current_date
			MSG="System running on battery power!"
			write_log_file
			system_shutdown_timer
		elif [ "${DEV_STATUS}" = "${DEFAULT_TOPIC_LOWBATTMODE}" ]; then
			system_shutdown_lowbatt
		elif [ -z "${DEV_STATUS}" ]; then
			# Notify we lost communication with the device.
			device_commlost
		fi
	done &

	if [ "$?" -eq "0" ]; then
		touch "${LOCK_FILE}"
		MSG="Script started successfully!"
		echo "${DATE}: ${SCRIPTNAME} ${MSG}" >> ${LOG_FILE}
		logger -t ${SCRIPTNAME} ${MSG}
	else
		MSG="Script startup error, exiting."
		echo "${DATE}: ${SCRIPTNAME} ${MSG}" >> ${LOG_FILE}
		logger -t ${SCRIPTNAME} ${MSG}
		exit 1
	fi
}

# Handle script options.
case "${1}" in
	start)
		cmd_start
		;;
	stop)
		cmd_stop
		;;
	stat)
		cmd_devstats
		;;
	jstat)
		JSON_FORMAT="1"
		cmd_devstats
		;;
	log)
		cmd_logview
		;;
	version|-v)
		cmd_version
		;;
	help|-h)
		cmd_usage
		;;
	*)
		cmd_usage
		;;
esac
